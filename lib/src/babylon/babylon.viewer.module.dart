@JS() library typescript.babylon.viewer.module ; import "package:js/js.dart" ;
 import "package:func/func.dart" ;
 import "babylon.dart" show Observable, Engine, ISceneLoaderPlugin, ISceneLoaderPluginAsync, Scene, SceneLoaderProgressEvent, IDisposable, AbstractMesh, ParticleSystem, Skeleton, AnimationGroup, Material, Animation, Vector3, BaseTexture, IGlowLayerOptions, SceneOptimizer, ArcRotateCamera, Light, EnvironmentHelper, DefaultRenderingPipeline, Color3, IShadowLight, CubeTexture ;
 import "dart:html" show HtmlElement, CanvasElement, Event, ImageData, ImageElement, VideoElement ;
 import "babylon.glTF2Interface.dart" show IAsset ;
 import "babylonjs.loaders.dart" show IGLTFLoaderExtension, IGLTFLoaderData ;
 import "dart:typed_data" show ByteBuffer, TypedData ;
 /// <reference path="./babylon.d.ts"/>
 /// <reference path="./babylon.glTF2Interface.d.ts"/>
 /// <reference path="./babylonjs.loaders.d.ts"/>
 
// Module babylonjs-loaders
 /* WARNING: export assignment not yet supported. */
 
// End module babylonjs-loaders
 
 /// Generated by dts-bundle v0.7.3
 /// Dependencies for this module:
 /// ../../Tools/Gulp/babylonjs
 /// ../../Tools/Gulp/babylonjs-loaders
 
// Module babylonjs-viewer
 /// BabylonJS Viewer
 /// An HTML-Based viewer for 3D models, based on BabylonJS and its extensions.
 @JS("babylonjs-viewer.disableInit" ) external bool get disableInit; @JS("babylonjs-viewer.disableInit" ) external set disableInit(bool v);
 /// Dispose all viewers currently registered
 @JS("babylonjs-viewer.disposeAll" ) external void disposeAll(); @JS("babylonjs-viewer.Version" ) external String get Version; export show BABYLON, Version, InitTags, DefaultViewer, AbstractViewer, viewerGlobals, telemetryManager, disableInit, viewerManager, mapperManager, disposeAll, ModelLoader, ViewerModel, num/*enum AnimationPlayMode*/, num/*enum AnimationState*/, num/*enum ModelState*/, ILoaderPlugin ;
 export "configuration.dart" ;
 
// End module babylonjs-viewer
 
// Module babylonjs-viewer/configuration/mappers
 /// This is the mapper's interface. Implement this function to create your own mapper and register it at the mapper manager
 @anonymous @JS() abstract class IMapper { external ViewerConfiguration map(dynamic rawSource); }

 /// The MapperManager manages the different implemented mappers.
 /// It allows the user to register new mappers as well and use them to parse their own configuration data
 @JS("babylonjs-viewer/configuration/mappers.MapperManager" ) class MapperManager { // @Ignore
 MapperManager .fakeConstructor$() ;
 /// The default mapper is the JSON mapper.
 external static String get DefaultMapper; external static set DefaultMapper(String v); external factory MapperManager();
 /// Get a specific configuration mapper.
 external IMapper getMapper(String type);
 /// Use this functio to register your own configuration mapper.
 /// After a mapper is registered, it can be used to parse the specific type fo configuration to the standard ViewerConfiguration.
 external void registerMapper(String type, IMapper mapper);
 /// Dispose the mapper manager and all of its mappers.
 external void dispose(); }

 /// mapperManager is a singleton of the type MapperManager.
 /// The mapperManager can be disposed directly with calling mapperManager.dispose()
 /// or indirectly with using BabylonViewer.disposeAll()
 @JS("babylonjs-viewer/configuration/mappers.mapperManager" ) external MapperManager get mapperManager; @JS("babylonjs-viewer/configuration/mappers.mapperManager" ) external set mapperManager(MapperManager v); 
// End module babylonjs-viewer/configuration/mappers
 
// Module babylonjs-viewer/configuration/globals
 @JS("babylonjs-viewer/configuration/globals.ViewerGlobals" ) class ViewerGlobals { // @Ignore
 ViewerGlobals .fakeConstructor$() ;
 external bool get disableInit; external set disableInit(bool v); external bool get disableWebGL2Support; external set disableWebGL2Support(bool v); }

 @JS("babylonjs-viewer/configuration/globals.viewerGlobals" ) external ViewerGlobals get viewerGlobals; @JS("babylonjs-viewer/configuration/globals.viewerGlobals" ) external set viewerGlobals(ViewerGlobals v); 
// End module babylonjs-viewer/configuration/globals
 
// Module babylonjs-viewer/viewer/viewerManager
 /// The viewer manager is the container for all viewers currently registered on this page.
 /// It is possible to have more than one viewer on a single page.
 @JS("babylonjs-viewer/viewer/viewerManager.ViewerManager" ) class ViewerManager { // @Ignore
 ViewerManager .fakeConstructor$() ;
 /// A callback that will be triggered when a new viewer was added
 external VoidFunc1<AbstractViewer> get onViewerAdded; external set onViewerAdded(VoidFunc1<AbstractViewer> v);
 /// Will notify when a new viewer was added
 external Observable<AbstractViewer> get onViewerAddedObservable; external set onViewerAddedObservable(Observable<AbstractViewer> v);
 /// Will notify when a viewer was removed (disposed)
 external Observable<String> get onViewerRemovedObservable; external set onViewerRemovedObservable(Observable<String> v); external factory ViewerManager();
 /// Adding a new viewer to the viewer manager and start tracking it.
 external void addViewer(AbstractViewer viewer);
 /// remove a viewer from the viewer manager
 external void removeViewer(AbstractViewer viewer);
 /// Get a viewer by its baseId (if the container element has an ID, it is the this is. if not, a random id was assigned)
 external AbstractViewer getViewerById(String id);
 /// Get a viewer using a container element
 external dynamic/*AbstractViewer|dynamic*/ getViewerByHTMLElement(HtmlElement element);
 /// Get a promise that will fullfil when this viewer was initialized.
 /// Since viewer initialization and template injection is asynchronous, using the promise will guaranty that
 /// you will get the viewer after everything was already configured.
 external Promise<AbstractViewer> getViewerPromiseById(String id);
 /// dispose the manager and all of its associated viewers
 external void dispose(); }

 @JS("babylonjs-viewer/viewer/viewerManager.viewerManager" ) external ViewerManager get viewerManager; @JS("babylonjs-viewer/viewer/viewerManager.viewerManager" ) external set viewerManager(ViewerManager v); 
// End module babylonjs-viewer/viewer/viewerManager
 
// Module babylonjs-viewer/viewer/defaultViewer
 /// The Default viewer is the default implementation of the AbstractViewer.
 /// It uses the templating system to render a new canvas and controls.
 @JS("babylonjs-viewer/viewer/defaultViewer.DefaultViewer" ) class DefaultViewer extends AbstractViewer { // @Ignore
 DefaultViewer .fakeConstructor$() : super.fakeConstructor$() ;
 external HtmlElement get containerElement; external set containerElement(HtmlElement v);
 /// Create a new default viewer
 external factory DefaultViewer(HtmlElement containerElement, [ViewerConfiguration initialConfiguration]);
 /// This will be executed when the templates initialize.
 external Promise<AbstractViewer> JS$_onTemplatesLoaded();
 /// Toggle fullscreen of the entire viewer
 external VoidFunc0 get toggleFullscreen; external set toggleFullscreen(VoidFunc0 v);
 /// Preparing the container element to present the viewer
 external void JS$_prepareContainerElement();
 /// This function will configure the templates and update them after a model was loaded
 /// It is mainly responsible to changing the title and subtitle etc'.
 external void JS$_configureTemplate(ViewerModel model);
 /// This will load a new model to the default viewer
 /// overriding the AbstractViewer's loadModel.
 /// The scene will automatically be cleared of the old models, if exist.
 external Promise<ViewerModel> loadModel([dynamic/*String|IModelConfiguration*/ model]);
 /// Show the overlay and the defined sub-screen.
 /// Mainly used for help and errors
 external Promise/*Promise<String>|Promise<Template>*/ showOverlayScreen(String subScreen);
 /// Hide the overlay screen.
 external Promise/*Promise<String>|Promise<Template>*/ hideOverlayScreen();
 /// show the viewer (in case it was hidden)
 external Promise<Template> show([Func1<Template, Promise<Template>> visibilityFunction]);
 /// hide the viewer (in case it is visible)
 external Promise<Template> hide([Func1<Template, Promise<Template>> visibilityFunction]);
 /// Show the loading screen.
 /// The loading screen can be configured using the configuration object
 external Promise/*Promise<String>|Promise<Template>*/ showLoadingScreen();
 /// Hide the loading screen
 external Promise/*Promise<String>|Promise<Template>*/ hideLoadingScreen(); }

 
// End module babylonjs-viewer/viewer/defaultViewer
 
// Module babylonjs-viewer/viewer/viewer
 /// The AbstractViewr is the center of Babylon's viewer.
 /// It is the basic implementation of the default viewer and is responsible of loading and showing the model and the templates
 @JS("babylonjs-viewer/viewer/viewer.AbstractViewer" ) abstract class AbstractViewer { // @Ignore
 AbstractViewer .fakeConstructor$() ;
 external HtmlElement get containerElement; external set containerElement(HtmlElement v);
 /// The corresponsing template manager of this viewer.
 external TemplateManager get templateManager; external set templateManager(TemplateManager v);
 /// Babylon Engine corresponding with this viewer
 external Engine get engine; external set engine(Engine v);
 /// The ID of this viewer. it will be generated randomly or use the HTML Element's ID.
 external String get baseId; external set baseId(String v);
 /// The last loader used to load a model.
 external dynamic/*ISceneLoaderPlugin|ISceneLoaderPluginAsync*/ get lastUsedLoader; external set lastUsedLoader(dynamic/*ISceneLoaderPlugin|ISceneLoaderPluginAsync*/ v);
 /// The ModelLoader instance connected with this viewer.
 external ModelLoader get modelLoader; external set modelLoader(ModelLoader v);
 /// A flag that controls whether or not the render loop should be executed
 external bool get runRenderLoop; external set runRenderLoop(bool v);
 /// The scene manager connected with this viewer instance
 external SceneManager get sceneManager; external set sceneManager(SceneManager v);
 /// the viewer configuration object
 external ViewerConfiguration get JS$_configuration; external set JS$_configuration(ViewerConfiguration v);
 /// Will notify when the scene was initialized
 external Observable<Scene> get onSceneInitObservable; external set onSceneInitObservable(Observable<Scene> v);
 /// will notify when the engine was initialized
 external Observable<Engine> get onEngineInitObservable; external set onEngineInitObservable(Observable<Engine> v);
 /// Will notify when a new model was added to the scene.
 /// Note that added does not neccessarily mean loaded!
 external Observable<ViewerModel> get onModelAddedObservable; external set onModelAddedObservable(Observable<ViewerModel> v);
 /// will notify after every model load
 external Observable<ViewerModel> get onModelLoadedObservable; external set onModelLoadedObservable(Observable<ViewerModel> v);
 /// will notify when any model notify of progress
 external Observable<SceneLoaderProgressEvent> get onModelLoadProgressObservable; external set onModelLoadProgressObservable(Observable<SceneLoaderProgressEvent> v);
 /// will notify when any model load failed.
 external Observable<dynamic/*{
                    message: string;
                    exception: any;
            }*/> get onModelLoadErrorObservable; external set onModelLoadErrorObservable(Observable<dynamic/*{
                    message: string;
                    exception: any;
            }*/> v);
 /// Will notify when a model was removed from the scene;
 external Observable<ViewerModel> get onModelRemovedObservable; external set onModelRemovedObservable(Observable<ViewerModel> v);
 /// will notify when a new loader was initialized.
 /// Used mainly to know when a model starts loading.
 external Observable<dynamic/*ISceneLoaderPlugin|ISceneLoaderPluginAsync*/> get onLoaderInitObservable; external set onLoaderInitObservable(Observable<dynamic/*ISceneLoaderPlugin|ISceneLoaderPluginAsync*/> v);
 /// Observers registered here will be executed when the entire load process has finished.
 external Observable<AbstractViewer> get onInitDoneObservable; external set onInitDoneObservable(Observable<AbstractViewer> v);
 /// Functions added to this observable will be executed on each frame rendered.
 external Observable<AbstractViewer> get onFrameRenderedObservable; external set onFrameRenderedObservable(Observable<AbstractViewer> v);
 /// The canvas associated with this viewer
 external CanvasElement get JS$_canvas; external set JS$_canvas(CanvasElement v);
 /// The (single) canvas of this viewer
 external CanvasElement get canvas; external set canvas(CanvasElement v);
 /// is this viewer disposed?
 external bool get JS$_isDisposed; external set JS$_isDisposed(bool v);
 /// registered onBeforeRender functions.
 /// This functions are also registered at the native scene. The reference can be used to unregister them.
 external List<VoidFunc0> get JS$_registeredOnBeforeRenderFunctions; external set JS$_registeredOnBeforeRenderFunctions(List<VoidFunc0> v);
 /// The configuration loader of this viewer
 external ConfigurationLoader get JS$_configurationLoader; external set JS$_configurationLoader(ConfigurationLoader v);
 /// Is the viewer already initialized. for internal use.
 external bool get JS$_isInit; external set JS$_isInit(bool v); external factory AbstractViewer(HtmlElement containerElement, [ViewerConfiguration initialConfiguration]);
 /// get the baseId of this viewer
 external String getBaseId();
 /// Do we have a canvas to render on, and is it a part of the scene
 external bool isCanvasInDOM();
 /// Set the viewer's background rendering flag.
 external bool get renderInBackground; external set renderInBackground(bool v);
 /// Get the configuration object. This is a reference only.
 /// The configuration can ONLY be updated using the updateConfiguration function.
 /// changing this object will have no direct effect on the scene.
 external ViewerConfiguration get configuration; external set configuration(ViewerConfiguration v);
 /// force resizing the engine.
 external void forceResize();
 /// The resize function that will be registered with the window object
 external VoidFunc0 get JS$_resize; external set JS$_resize(VoidFunc0 v);
 /// Force a single render loop execution.
 external void forceRender();
 /// render loop that will be executed by the engine
 external VoidFunc1Opt1<bool> get JS$_render; external set JS$_render(VoidFunc1Opt1<bool> v);
 /// Takes a screenshot of the scene and returns it as a base64 encoded png.
 external Promise<String> takeScreenshot([void callback(String data), num width, num height]);
 /// Update the current viewer configuration with new values.
 /// Only provided information will be updated, old configuration values will be kept.
 /// If this.configuration was manually changed, you can trigger this function with no parameters,
 /// and the entire configuration will be updated.
 external void updateConfiguration([Partial<ViewerConfiguration> newConfiguration]);
 /// this is used to register native functions using the configuration object.
 /// This will configure the observers.
 external void JS$_configureObservers(IObserversConfiguration observersConfiguration);
 /// Dispoe the entire viewer including the scene and the engine
 external void dispose();
 /// This will prepare the container element for the viewer
 external dynamic JS$_prepareContainerElement();
 /// This function will execute when the HTML templates finished initializing.
 /// It should initialize the engine and continue execution.
 external Promise<AbstractViewer> JS$_onTemplatesLoaded();
 /// Initialize the engine. Retruns a promise in case async calls are needed.
 /// @protected
 /// @memberof Viewer
 external Promise<Engine> JS$_initEngine();
 /// Initialize a model loading. The returned object (a ViewerModel object) will be loaded in the background.
 /// The difference between this and loadModel is that loadModel will fulfill the promise when the model finished loading.
 external ViewerModel initModel(dynamic/*String|IModelConfiguration*/ modelConfig, [bool clearScene]);
 /// load a model using the provided configuration.
 /// This function, as opposed to initModel, will return a promise that resolves when the model is loaded, and rejects with error.
 /// If you want to attach to the observables of the model, use initModle instead.
 external Promise<ViewerModel> loadModel(dynamic/*String|IModelConfiguration*/ modelConfig, [bool clearScene]); external void JS$_initTelemetryEvents();
 /// Injects all the spectre shader in the babylon shader store
 external void JS$_injectCustomShaders(); }

 
// End module babylonjs-viewer/viewer/viewer
 
// Module babylonjs-viewer/telemetryManager
 /// The data structure of a telemetry event.
 @anonymous @JS() abstract class TelemetryData { external String get event; external set event(String v); external String get session; external set session(String v); external DateTime get date; external set date(DateTime v); external num get now; external set now(num v); external AbstractViewer get viewer; external set viewer(AbstractViewer v); external dynamic get detail; external set detail(dynamic v); external factory TelemetryData({ String event, String session, DateTime date, num now, AbstractViewer viewer, dynamic detail}); }

 /// Receives Telemetry events and raises events to the API
 @JS("babylonjs-viewer/telemetryManager.TelemetryManager" ) class TelemetryManager { // @Ignore
 TelemetryManager .fakeConstructor$() ;
 external Observable<TelemetryData> get onEventBroadcastedObservable; external set onEventBroadcastedObservable(Observable<TelemetryData> v);
 /// Receives a telemetry event
 external VoidFunc3Opt1<String, AbstractViewer, dynamic> get broadcast; external set broadcast(VoidFunc3Opt1<String, AbstractViewer, dynamic> v);
 /// Log a Telemetry event for errors raised on the WebGL context.
 external void flushWebGLErrors(AbstractViewer viewer);
 /// Enable or disable telemetry events
 external bool get enable; external set enable(bool v);
 /// Returns the current session ID or creates one if it doesn't exixt
 external String get session; external set session(String v);
 /// Disposes the telemetry manager
 external void dispose(); }

 @JS("babylonjs-viewer/telemetryManager.telemetryManager" ) external TelemetryManager get telemetryManager; 
// End module babylonjs-viewer/telemetryManager
 
// Module babylonjs-viewer/loader/modelLoader
 /// An instance of the class is in charge of loading the model correctly.
 /// This class will continously be expended with tasks required from the specific loaders Babylon has.
 /// A Model loader is unique per (Abstract)Viewer. It is being generated by the viewer
 @JS("babylonjs-viewer/loader/modelLoader.ModelLoader" ) class ModelLoader { // @Ignore
 ModelLoader .fakeConstructor$() ;
 /// Create a new Model loader
 external factory ModelLoader(AbstractViewer JS$_viewer);
 /// Adds a new plugin to the loader process.
 external void addPlugin(dynamic/*ILoaderPlugin|String*/ plugin);
 /// Load a model using predefined configuration
 external ViewerModel load(IModelConfiguration modelConfiguration); external void cancelLoad(ViewerModel model);
 /// dispose the model loader.
 /// If loaders are registered and are in the middle of loading, they will be disposed and the request(s) will be cancelled.
 external void dispose(); }

 
// End module babylonjs-viewer/loader/modelLoader
 
// Module babylonjs-viewer/model/viewerModel
 /// The current state of the model
 @JS("babylonjs-viewer/model/viewerModel.ModelState" ) class ModelState { external static num get INIT; external static num get LOADING; external static num get LOADED; external static num get ENTRY; external static num get ENTRYDONE; external static num get COMPLETE; external static num get CANCELED; external static num get ERROR; }
 /// The viewer model is a container for all assets representing a sngle loaded model.
 @JS("babylonjs-viewer/model/viewerModel.ViewerModel" ) class ViewerModel implements IDisposable { // @Ignore
 ViewerModel .fakeConstructor$() ;
 external AbstractViewer get JS$_viewer; external set JS$_viewer(AbstractViewer v);
 /// The loader used to load this model.
 external dynamic/*ISceneLoaderPlugin|ISceneLoaderPluginAsync*/ get loader; external set loader(dynamic/*ISceneLoaderPlugin|ISceneLoaderPluginAsync*/ v);
 /// This model's root mesh (the parent of all other meshes).
 /// This mesh does not(!) exist in the meshes array.
 external AbstractMesh get rootMesh; external set rootMesh(AbstractMesh v);
 /// ParticleSystems connected to this model
 external List<ParticleSystem> get particleSystems; external set particleSystems(List<ParticleSystem> v);
 /// Skeletons defined in this model
 external List<Skeleton> get skeletons; external set skeletons(List<Skeleton> v);
 /// The current model animation.
 /// On init, this will be undefined.
 external IModelAnimation get currentAnimation; external set currentAnimation(IModelAnimation v);
 /// Observers registered here will be executed when the model is done loading
 external Observable<ViewerModel> get onLoadedObservable; external set onLoadedObservable(Observable<ViewerModel> v);
 /// Observers registered here will be executed when the loader notified of a progress event
 external Observable<SceneLoaderProgressEvent> get onLoadProgressObservable; external set onLoadProgressObservable(Observable<SceneLoaderProgressEvent> v);
 /// Observers registered here will be executed when the loader notified of an error.
 external Observable<dynamic/*{
                    message: string;
                    exception: any;
            }*/> get onLoadErrorObservable; external set onLoadErrorObservable(Observable<dynamic/*{
                    message: string;
                    exception: any;
            }*/> v);
 /// Will be executed after the model finished loading and complete, including entry animation and lod
 external Observable<ViewerModel> get onCompleteObservable; external set onCompleteObservable(Observable<ViewerModel> v);
 /// Observers registered here will be executed every time the model is being configured.
 /// This can be used to extend the model's configuration without extending the class itself
 external Observable<ViewerModel> get onAfterConfigure; external set onAfterConfigure(Observable<ViewerModel> v);
 /// The current model state (loaded, error, etc)
 external num/*enum ModelState*/ get state; external set state(num/*enum ModelState*/ v);
 /// A loadID provided by the modelLoader, unique to ths (Abstract)Viewer instance.
 external num get loadId; external set loadId(num v); external IAsset get loadInfo; external set loadInfo(IAsset v); external factory ViewerModel(AbstractViewer JS$_viewer, IModelConfiguration modelConfiguration);
 /// Set whether this model is enabled or not.
 external bool get enabled; external set enabled(bool v); external bool get loaderDone; external set loaderDone(bool v);
 /// Get the viewer showing this model
 external AbstractViewer getViewer();
 /// Add a mesh to this model.
 /// Any mesh that has no parent will be provided with the root mesh as its new parent.
 external dynamic/*Promise<ViewerModel>|dynamic*/ addMesh(AbstractMesh mesh, [bool triggerLoaded]);
 /// get the list of meshes (excluding the root mesh)
 external List<AbstractMesh> get meshes; external set meshes(List<AbstractMesh> v);
 /// (Re-)set the model's entire configuration
 external IModelConfiguration get configuration; external set configuration(IModelConfiguration v);
 /// Update the current configuration with new values.
 /// Configuration will not be overwritten, but merged with the new configuration.
 /// Priority is to the new configuration
 external void updateConfiguration(Partial<IModelConfiguration> newConfiguration);
 /// Add a new animation group to this model.
 external void addAnimationGroup(AnimationGroup animationGroup);
 /// Get the ModelAnimation array
 external List<IModelAnimation> getAnimations();
 /// Get the animations' names. Using the names you can play a specific animation.
 external List<String> getAnimationNames();
 /// Get an animation by the provided name. Used mainly when playing n animation.
 external IModelAnimation/*IModelAnimation|Null*/ JS$_getAnimationByName(String name);
 /// Choose an initialized animation using its name and start playing it
 external IModelAnimation playAnimation(String name); external IModelAnimation setCurrentAnimationByName(String name);
 /// Apply a material configuration to a material
 external void JS$_applyModelMaterialConfiguration(Material material);
 /// Begin @animations with the specified @easingFunction
 external void transitionTo(List<Animation> animations, num duration, dynamic easingFunction, dynamic/*num|dynamic*/ easingMode, void onAnimationEnd());
 /// Stops and removes all animations that have been applied to the model
 external void stopAllAnimations();
 /// Will remove this model from the viewer (but NOT dispose it).
 external void remove();
 /// Dispose this model, including all of its associated assets.
 external void dispose(); }

 
// End module babylonjs-viewer/model/viewerModel
 
// Module babylonjs-viewer/model/modelAnimation
 /// Animation play mode enum - is the animation looping or playing once
 @JS("babylonjs-viewer/model/modelAnimation.AnimationPlayMode" ) class AnimationPlayMode { external static num get ONCE; external static num get LOOP; }
 /// An enum representing the current state of an animation object
 @JS("babylonjs-viewer/model/modelAnimation.AnimationState" ) class AnimationState { external static num get INIT; external static num get PLAYING; external static num get PAUSED; external static num get STOPPED; external static num get ENDED; }
 /// The different type of easing functions available
 @JS("babylonjs-viewer/model/modelAnimation.EasingFunction" ) class EasingFunction { external static num get Linear; external static num get CircleEase; external static num get BackEase; external static num get BounceEase; external static num get CubicEase; external static num get ElasticEase; external static num get ExponentialEase; external static num get PowerEase; external static num get QuadraticEase; external static num get QuarticEase; external static num get QuinticEase; external static num get SineEase; }
 /// Defines a simple animation to be applied to a model (scale).
 @anonymous @JS() abstract class ModelAnimationConfiguration {
 /// Time of animation, in seconds
 external num get time; external set time(num v);
 /// Scale to apply
 external Vector3 get scaling; external set scaling(Vector3 v);
 /// Easing function to apply
 /// See SPECTRE.EasingFunction
 external num get easingFunction; external set easingFunction(num v);
 /// An Easing mode to apply to the easing function
 /// See BABYLON.EasingFunction
 external num get easingMode; external set easingMode(num v); external factory ModelAnimationConfiguration({ num time, Vector3 scaling, num easingFunction, num easingMode}); }

 /// This interface can be implemented to define new types of ModelAnimation objects.
 @anonymous @JS() abstract class IModelAnimation {
 /// Current animation state (playing, stopped etc')
 external num/*enum AnimationState*/ get state; external set state(num/*enum AnimationState*/ v);
 /// the name of the animation
 external String get name; external set name(String v);
 /// Get the max numbers of frame available in the animation group
 /// In correlation to an arry, this would be ".length"
 external num get frames; external set frames(num v);
 /// Get the current frame playing right now.
 /// This can be used to poll the frame currently playing (and, for exmaple, display a progress bar with the data)
 /// In correlation to an array, this would be the current index
 external num get currentFrame; external set currentFrame(num v);
 /// Animation's FPS value
 external num get fps; external set fps(num v);
 /// Get or set the animation's speed ration (Frame-to-fps)
 external num get speedRatio; external set speedRatio(num v);
 /// Gets or sets the aimation's play mode.
 external num/*enum AnimationPlayMode*/ get playMode; external set playMode(num/*enum AnimationPlayMode*/ v);
 /// Start the animation
 external dynamic start();
 /// Stop the animation.
 /// This will fail silently if the animation group is already stopped.
 external dynamic stop();
 /// Pause the animation
 /// This will fail silently if the animation is not currently playing
 external dynamic pause();
 /// Reset this animation
 external dynamic reset();
 /// Restart the animation
 external dynamic restart();
 /// Go to a specific
 external dynamic goToFrame(num frameNumber);
 /// Dispose this animation
 external dynamic dispose(); }

 /// The GroupModelAnimation is an implementation of the IModelAnimation interface using BABYLON's
 /// native GroupAnimation class.
 @JS("babylonjs-viewer/model/modelAnimation.GroupModelAnimation" ) class GroupModelAnimation implements IModelAnimation { // @Ignore
 GroupModelAnimation .fakeConstructor$() ;
 /// Create a new GroupModelAnimation object using an AnimationGroup object
 external factory GroupModelAnimation(AnimationGroup JS$_animationGroup);
 /// Get the animation's name
 external String get name; external set name(String v);
 /// Get the current animation's state
 external num/*enum AnimationState*/ get state; external set state(num/*enum AnimationState*/ v);
 /// Sets the speed ratio to use for all animations
 external num get speedRatio; external set speedRatio(num v);
 /// Get the max numbers of frame available in the animation group
 /// In correlation to an arry, this would be ".length"
 external num get frames; external set frames(num v);
 /// Get the current frame playing right now.
 /// This can be used to poll the frame currently playing (and, for exmaple, display a progress bar with the data)
 /// In correlation to an array, this would be the current index
 external num get currentFrame; external set currentFrame(num v);
 /// Get the FPS value of this animation
 external num get fps; external set fps(num v);
 /// Set the play mode.
 /// If the animation is played, it will continue playing at least once more, depending on the new play mode set.
 /// If the animation is not set, the will be initialized and will wait for the user to start playing it.
 external num/*enum AnimationPlayMode*/ get playMode; external set playMode(num/*enum AnimationPlayMode*/ v);
 /// Reset the animation group
 external void reset();
 /// Restart the animation group
 external void restart();
 external void goToFrame(num frameNumber);
 /// Start playing the animation.
 external void start();
 /// Pause the animation
 external void pause();
 /// Stop the animation.
 /// This will fail silently if the animation group is already stopped.
 external void stop();
 /// Dispose this animation object.
 external void dispose(); }

 
// End module babylonjs-viewer/model/modelAnimation
 
// Module babylonjs-viewer/loader/plugins/loaderPlugin
 /// This interface defines the structure of a loader plugin.
 /// Any of those functions will be called if (!) the loader supports those callbacks.
 /// Any loader supports onInit, onLoaded, onError and onProgress.
 @anonymous @JS() abstract class ILoaderPlugin { external VoidFunc2<dynamic/*ISceneLoaderPlugin|ISceneLoaderPluginAsync*/, ViewerModel> get onInit; external set onInit(VoidFunc2<dynamic/*ISceneLoaderPlugin|ISceneLoaderPluginAsync*/, ViewerModel> v); external VoidFunc1<ViewerModel> get onLoaded; external set onLoaded(VoidFunc1<ViewerModel> v); external VoidFunc2Opt1<String, dynamic> get onError; external set onError(VoidFunc2Opt1<String, dynamic> v); external VoidFunc1<SceneLoaderProgressEvent> get onProgress; external set onProgress(VoidFunc1<SceneLoaderProgressEvent> v); external VoidFunc1<IGLTFLoaderExtension> get onExtensionLoaded; external set onExtensionLoaded(VoidFunc1<IGLTFLoaderExtension> v); external VoidFunc1<IGLTFLoaderData> get onParsed; external set onParsed(VoidFunc1<IGLTFLoaderData> v); external VoidFunc1<AbstractMesh> get onMeshLoaded; external set onMeshLoaded(VoidFunc1<AbstractMesh> v); external VoidFunc1<BaseTexture> get onTextureLoaded; external set onTextureLoaded(VoidFunc1<BaseTexture> v); external VoidFunc1<Material> get onMaterialLoaded; external set onMaterialLoaded(VoidFunc1<Material> v); external VoidFunc0 get onComplete; external set onComplete(VoidFunc0 v); external factory ILoaderPlugin({ VoidFunc2<dynamic/*ISceneLoaderPlugin|ISceneLoaderPluginAsync*/, ViewerModel> onInit, VoidFunc1<ViewerModel> onLoaded, VoidFunc2Opt1<String, dynamic> onError, VoidFunc1<SceneLoaderProgressEvent> onProgress, VoidFunc1<IGLTFLoaderExtension> onExtensionLoaded, VoidFunc1<IGLTFLoaderData> onParsed, VoidFunc1<AbstractMesh> onMeshLoaded, VoidFunc1<BaseTexture> onTextureLoaded, VoidFunc1<Material> onMaterialLoaded, VoidFunc0 onComplete}); }

 
// End module babylonjs-viewer/loader/plugins/loaderPlugin
 
// Module babylonjs-viewer/initializer
 /// Will attach an init function the the DOMContentLoaded event.
 /// The init function will be removed automatically after the event was triggered.
 @JS("babylonjs-viewer/initializer.initListeners" ) external void initListeners();
 /// Select all HTML tags on the page that match the selector and initialize a viewer
 @JS("babylonjs-viewer/initializer.InitTags" ) external void InitTags([String selector]); 
// End module babylonjs-viewer/initializer
 
// Module babylonjs-viewer/configuration
 export "configuration.dart" ;
 
// End module babylonjs-viewer/configuration
 
// Module babylonjs-viewer/configuration/configuration
 @JS("babylonjs-viewer/configuration/configuration.getConfigurationKey" ) external dynamic getConfigurationKey(String key, dynamic configObject); @anonymous @JS() abstract class ViewerConfiguration { external String get version; external set version(String v); external String get JS$extends; external set JS$extends(String v); external String get pageUrl; external set pageUrl(String v); external dynamic/*String|{
                    url?: string;
                    payload?: any;
                    mapper?: string;
            }*/ get configuration; external set configuration(dynamic/*String|{
                    url?: string;
                    payload?: any;
                    mapper?: string;
            }*/ v); external IObserversConfiguration get observers; external set observers(IObserversConfiguration v); external String get canvasElement; external set canvasElement(String v); external dynamic/*IModelConfiguration|String*/ get model; external set model(dynamic/*IModelConfiguration|String*/ v); external ISceneConfiguration get scene; external set scene(ISceneConfiguration v); external dynamic/*ISceneOptimizerConfiguration|bool*/ get optimizer; external set optimizer(dynamic/*ISceneOptimizerConfiguration|bool*/ v); external ICameraConfiguration get camera; external set camera(ICameraConfiguration v); external dynamic/*bool|ISkyboxConfiguration*/ get skybox; external set skybox(dynamic/*bool|ISkyboxConfiguration*/ v); external dynamic/*bool|IGroundConfiguration*/ get ground; external set ground(dynamic/*bool|IGroundConfiguration*/ v); external dynamic/*JSMap of <String,bool|ILightConfiguration>*/ get lights; external set lights(dynamic/*JSMap of <String,bool|ILightConfiguration>*/ v); external dynamic/*{
                    renderInBackground?: boolean;
                    antialiasing?: boolean;
                    disableResize?: boolean;
                    engineOptions?: EngineOptions;
                    adaptiveQuality?: boolean;
            }*/ get engine; external set engine(dynamic/*{
                    renderInBackground?: boolean;
                    antialiasing?: boolean;
                    disableResize?: boolean;
                    engineOptions?: EngineOptions;
                    adaptiveQuality?: boolean;
            }*/ v); external dynamic/*{
                    main: ITemplateConfiguration;
                    [key: string]: ITemplateConfiguration;
            }*/ get templates; external set templates(dynamic/*{
                    main: ITemplateConfiguration;
                    [key: string]: ITemplateConfiguration;
            }*/ v); external dynamic/*{
                    shaders?: {
                            [key: string]: string;
                    };
                    includes?: {
                            [key: string]: string;
                    };
            }*/ get customShaders; external set customShaders(dynamic/*{
                    shaders?: {
                            [key: string]: string;
                    };
                    includes?: {
                            [key: string]: string;
                    };
            }*/ v); external dynamic/*{
                    extendedMaterial?: boolean;
                    msftLod?: boolean;
                    telemetry?: boolean;
                    minecraft?: boolean;
                    [propName: string]: boolean | undefined;
            }*/ get loaderPlugins; external set loaderPlugins(dynamic/*{
                    extendedMaterial?: boolean;
                    msftLod?: boolean;
                    telemetry?: boolean;
                    minecraft?: boolean;
                    [propName: string]: boolean | undefined;
            }*/ v); external dynamic/*{
                    flashlight?: boolean | {
                            exponent?: number;
                            angle?: number;
                            intensity?: number;
                            diffuse?: {
                                    r: number;
                                    g: number;
                                    b: number;
                            };
                            specular?: {
                                    r: number;
                                    g: number;
                                    b: number;
                            };
                    };
                    hideLoadingDelay?: number;
                    assetsRootURL?: string;
                    environmentMainColor?: {
                            r: number;
                            g: number;
                            b: number;
                    };
                    environmentMap?: {
                            /**
                                * Environment map texture path in relative to the asset folder.
                                */
                            texture: string;
                            /**
                                * Default rotation to apply to the environment map.
                                */
                            rotationY: number;
                            /**
                                * Tint level of the main color on the environment map.
                                */
                            tintLevel: number;
                    };
                    defaultRenderingPipelines?: boolean | IDefaultRenderingPipelineConfiguration;
            }*/ get lab; external set lab(dynamic/*{
                    flashlight?: boolean | {
                            exponent?: number;
                            angle?: number;
                            intensity?: number;
                            diffuse?: {
                                    r: number;
                                    g: number;
                                    b: number;
                            };
                            specular?: {
                                    r: number;
                                    g: number;
                                    b: number;
                            };
                    };
                    hideLoadingDelay?: number;
                    assetsRootURL?: string;
                    environmentMainColor?: {
                            r: number;
                            g: number;
                            b: number;
                    };
                    environmentMap?: {
                            /**
                                * Environment map texture path in relative to the asset folder.
                                */
                            texture: string;
                            /**
                                * Default rotation to apply to the environment map.
                                */
                            rotationY: number;
                            /**
                                * Tint level of the main color on the environment map.
                                */
                            tintLevel: number;
                    };
                    defaultRenderingPipelines?: boolean | IDefaultRenderingPipelineConfiguration;
            }*/ v); external factory ViewerConfiguration({ String version, String JS$extends, String pageUrl, dynamic/*String|{
                    url?: string;
                    payload?: any;
                    mapper?: string;
            }*/ configuration, IObserversConfiguration observers, String canvasElement, dynamic/*IModelConfiguration|String*/ model, ISceneConfiguration scene, dynamic/*ISceneOptimizerConfiguration|bool*/ optimizer, ICameraConfiguration camera, dynamic/*bool|ISkyboxConfiguration*/ skybox, dynamic/*bool|IGroundConfiguration*/ ground, dynamic/*JSMap of <String,bool|ILightConfiguration>*/ lights, dynamic/*{
                    renderInBackground?: boolean;
                    antialiasing?: boolean;
                    disableResize?: boolean;
                    engineOptions?: EngineOptions;
                    adaptiveQuality?: boolean;
            }*/ engine, dynamic/*{
                    main: ITemplateConfiguration;
                    [key: string]: ITemplateConfiguration;
            }*/ templates, dynamic/*{
                    shaders?: {
                            [key: string]: string;
                    };
                    includes?: {
                            [key: string]: string;
                    };
            }*/ customShaders, dynamic/*{
                    extendedMaterial?: boolean;
                    msftLod?: boolean;
                    telemetry?: boolean;
                    minecraft?: boolean;
                    [propName: string]: boolean | undefined;
            }*/ loaderPlugins, dynamic/*{
                    flashlight?: boolean | {
                            exponent?: number;
                            angle?: number;
                            intensity?: number;
                            diffuse?: {
                                    r: number;
                                    g: number;
                                    b: number;
                            };
                            specular?: {
                                    r: number;
                                    g: number;
                                    b: number;
                            };
                    };
                    hideLoadingDelay?: number;
                    assetsRootURL?: string;
                    environmentMainColor?: {
                            r: number;
                            g: number;
                            b: number;
                    };
                    environmentMap?: {
                            /**
                                * Environment map texture path in relative to the asset folder.
                                */
                            texture: string;
                            /**
                                * Default rotation to apply to the environment map.
                                */
                            rotationY: number;
                            /**
                                * Tint level of the main color on the environment map.
                                */
                            tintLevel: number;
                    };
                    defaultRenderingPipelines?: boolean | IDefaultRenderingPipelineConfiguration;
            }*/ lab}); }

 /// Defines an animation to be applied to a model (translation, scale or rotation).
 @anonymous @JS() abstract class IModelAnimationConfiguration {
 /// Time of animation, in seconds
 external num get time; external set time(num v);
 /// Scale to apply
 external dynamic/*{
                    x: number;
                    y: number;
                    z: number;
            }*/ get scaling; external set scaling(dynamic/*{
                    x: number;
                    y: number;
                    z: number;
            }*/ v);
 /// Easing function to apply
 /// See SPECTRE.EasingFunction
 external num get easingFunction; external set easingFunction(num v);
 /// An Easing mode to apply to the easing function
 /// See BABYLON.EasingFunction
 external num get easingMode; external set easingMode(num v); external factory IModelAnimationConfiguration({ num time, dynamic/*{
                    x: number;
                    y: number;
                    z: number;
            }*/ scaling, num easingFunction, num easingMode}); }

 @anonymous @JS() abstract class IDefaultRenderingPipelineConfiguration { external bool get sharpenEnabled; external set sharpenEnabled(bool v); external bool get bloomEnabled; external set bloomEnabled(bool v); external num get bloomThreshold; external set bloomThreshold(num v); external bool get depthOfFieldEnabled; external set depthOfFieldEnabled(bool v); external num/*enum DepthOfFieldEffectBlurLevel*/ get depthOfFieldBlurLevel; external set depthOfFieldBlurLevel(num/*enum DepthOfFieldEffectBlurLevel*/ v); external bool get fxaaEnabled; external set fxaaEnabled(bool v); external bool get imageProcessingEnabled; external set imageProcessingEnabled(bool v); external num get defaultPipelineTextureType; external set defaultPipelineTextureType(num v); external num get bloomScale; external set bloomScale(num v); external bool get chromaticAberrationEnabled; external set chromaticAberrationEnabled(bool v); external bool get grainEnabled; external set grainEnabled(bool v); external num get bloomKernel; external set bloomKernel(num v); external num get hardwareScaleLevel; external set hardwareScaleLevel(num v); external num get bloomWeight; external set bloomWeight(num v); external num get bllomThreshold; external set bllomThreshold(num v); external bool get hdr; external set hdr(bool v); external num get samples; external set samples(num v); external factory IDefaultRenderingPipelineConfiguration({ bool sharpenEnabled, bool bloomEnabled, num bloomThreshold, bool depthOfFieldEnabled, num/*enum DepthOfFieldEffectBlurLevel*/ depthOfFieldBlurLevel, bool fxaaEnabled, bool imageProcessingEnabled, num defaultPipelineTextureType, num bloomScale, bool chromaticAberrationEnabled, bool grainEnabled, num bloomKernel, num hardwareScaleLevel, num bloomWeight, num bllomThreshold, bool hdr, num samples}); }

 @anonymous @JS() abstract class IModelConfiguration { external String get id; external set id(String v); external String get url; external set url(String v); external String get root; external set root(String v); external String get file; external set file(String v); external String get loader; external set loader(String v); external dynamic/*{
                    x: number;
                    y: number;
                    z: number;
            }*/ get position; external set position(dynamic/*{
                    x: number;
                    y: number;
                    z: number;
            }*/ v); external dynamic/*{
                    x: number;
                    y: number;
                    z: number;
                    w?: number;
            }*/ get rotation; external set rotation(dynamic/*{
                    x: number;
                    y: number;
                    z: number;
                    w?: number;
            }*/ v); external dynamic/*{
                    x: number;
                    y: number;
                    z: number;
            }*/ get scaling; external set scaling(dynamic/*{
                    x: number;
                    y: number;
                    z: number;
            }*/ v); external num get parentObjectIndex; external set parentObjectIndex(num v); external bool get castShadow; external set castShadow(bool v); external bool get receiveShadows; external set receiveShadows(bool v); external dynamic/*bool|{
                    center?: boolean;
                    unitSize?: boolean;
                    parentIndex?: number;
            }*/ get normalize; external set normalize(dynamic/*bool|{
                    center?: boolean;
                    unitSize?: boolean;
                    parentIndex?: number;
            }*/ v); external String get title; external set title(String v); external String get subtitle; external set subtitle(String v); external String get thumbnail; external set thumbnail(String v); external dynamic/*{
                    autoStart?: boolean | string;
                    playOnce?: boolean;
                    autoStartIndex?: number;
            }*/ get animation; external set animation(dynamic/*{
                    autoStart?: boolean | string;
                    playOnce?: boolean;
                    autoStartIndex?: number;
            }*/ v); external IModelAnimationConfiguration get entryAnimation; external set entryAnimation(IModelAnimationConfiguration v); external IModelAnimationConfiguration get exitAnimation; external set exitAnimation(IModelAnimationConfiguration v); external dynamic/*{
                    directEnabled?: boolean;
                    directIntensity?: number;
                    emissiveIntensity?: number;
                    environmentIntensity?: number;
                    [propName: string]: any;
            }*/ get material; external set material(dynamic/*{
                    directEnabled?: boolean;
                    directIntensity?: number;
                    emissiveIntensity?: number;
                    environmentIntensity?: number;
                    [propName: string]: any;
            }*/ v);
 /// Rotation offset axis definition
 external dynamic/*{
                    x: number;
                    y: number;
                    z: number;
            }*/ get rotationOffsetAxis; external set rotationOffsetAxis(dynamic/*{
                    x: number;
                    y: number;
                    z: number;
            }*/ v);
 /// the offset angle
 external num get rotationOffsetAngle; external set rotationOffsetAngle(num v); external dynamic/*{
                    maxLODsToLoad?: number;
                    progressiveLoading?: boolean;
            }*/ get loaderConfiguration; external set loaderConfiguration(dynamic/*{
                    maxLODsToLoad?: number;
                    progressiveLoading?: boolean;
            }*/ v); external factory IModelConfiguration({ String id, String url, String root, String file, String loader, dynamic/*{
                    x: number;
                    y: number;
                    z: number;
            }*/ position, dynamic/*{
                    x: number;
                    y: number;
                    z: number;
                    w?: number;
            }*/ rotation, dynamic/*{
                    x: number;
                    y: number;
                    z: number;
            }*/ scaling, num parentObjectIndex, bool castShadow, bool receiveShadows, dynamic/*bool|{
                    center?: boolean;
                    unitSize?: boolean;
                    parentIndex?: number;
            }*/ normalize, String title, String subtitle, String thumbnail, dynamic/*{
                    autoStart?: boolean | string;
                    playOnce?: boolean;
                    autoStartIndex?: number;
            }*/ animation, IModelAnimationConfiguration entryAnimation, IModelAnimationConfiguration exitAnimation, dynamic/*{
                    directEnabled?: boolean;
                    directIntensity?: number;
                    emissiveIntensity?: number;
                    environmentIntensity?: number;
                    [propName: string]: any;
            }*/ material, dynamic/*{
                    x: number;
                    y: number;
                    z: number;
            }*/ rotationOffsetAxis, num rotationOffsetAngle, dynamic/*{
                    maxLODsToLoad?: number;
                    progressiveLoading?: boolean;
            }*/ loaderConfiguration}); }

 @anonymous @JS() abstract class ISkyboxConfiguration { external dynamic/*{
                    noMipMap?: boolean;
                    gammaSpace?: boolean;
                    url?: string | Array<string>;
            }*/ get cubeTexture; external set cubeTexture(dynamic/*{
                    noMipMap?: boolean;
                    gammaSpace?: boolean;
                    url?: string | Array<string>;
            }*/ v); external dynamic/*{
                    r: number;
                    g: number;
                    b: number;
            }*/ get color; external set color(dynamic/*{
                    r: number;
                    g: number;
                    b: number;
            }*/ v); external bool get pbr; external set pbr(bool v); external num get scale; external set scale(num v); external num get blur; external set blur(num v); external dynamic/*{
                    imageProcessingConfiguration?: IImageProcessingConfiguration;
                    [propName: string]: any;
            }*/ get material; external set material(dynamic/*{
                    imageProcessingConfiguration?: IImageProcessingConfiguration;
                    [propName: string]: any;
            }*/ v); external bool get infiniteDistance; external set infiniteDistance(bool v); external factory ISkyboxConfiguration({ dynamic/*{
                    noMipMap?: boolean;
                    gammaSpace?: boolean;
                    url?: string | Array<string>;
            }*/ cubeTexture, dynamic/*{
                    r: number;
                    g: number;
                    b: number;
            }*/ color, bool pbr, num scale, num blur, dynamic/*{
                    imageProcessingConfiguration?: IImageProcessingConfiguration;
                    [propName: string]: any;
            }*/ material, bool infiniteDistance}); }

 @anonymous @JS() abstract class IGroundConfiguration { external num get size; external set size(num v); external bool get receiveShadows; external set receiveShadows(bool v); external num get shadowLevel; external set shadowLevel(num v); external bool get shadowOnly; external set shadowOnly(bool v); external dynamic/*bool|{
                    sizeRatio?: number;
                    blurKernel?: number;
                    amount?: number;
                    fresnelWeight?: number;
                    fallOffDistance?: number;
                    textureType?: number;
            }*/ get mirror; external set mirror(dynamic/*bool|{
                    sizeRatio?: number;
                    blurKernel?: number;
                    amount?: number;
                    fresnelWeight?: number;
                    fallOffDistance?: number;
                    textureType?: number;
            }*/ v); external String get texture; external set texture(String v); external dynamic/*{
                    r: number;
                    g: number;
                    b: number;
            }*/ get color; external set color(dynamic/*{
                    r: number;
                    g: number;
                    b: number;
            }*/ v); external num get opacity; external set opacity(num v); external dynamic/*JSMap of <String,dynamic>*/ get material; external set material(dynamic/*JSMap of <String,dynamic>*/ v); external factory IGroundConfiguration({ num size, bool receiveShadows, num shadowLevel, bool shadowOnly, dynamic/*bool|{
                    sizeRatio?: number;
                    blurKernel?: number;
                    amount?: number;
                    fresnelWeight?: number;
                    fallOffDistance?: number;
                    textureType?: number;
            }*/ mirror, String texture, dynamic/*{
                    r: number;
                    g: number;
                    b: number;
            }*/ color, num opacity, dynamic/*JSMap of <String,dynamic>*/ material}); }

 @anonymous @JS() abstract class ISceneConfiguration { external bool get debug; external set debug(bool v); external dynamic/*{
                    r: number;
                    g: number;
                    b: number;
                    a: number;
            }*/ get clearColor; external set clearColor(dynamic/*{
                    r: number;
                    g: number;
                    b: number;
                    a: number;
            }*/ v); external dynamic/*{
                    r: number;
                    g: number;
                    b: number;
            }*/ get mainColor; external set mainColor(dynamic/*{
                    r: number;
                    g: number;
                    b: number;
            }*/ v); external IImageProcessingConfiguration get imageProcessingConfiguration; external set imageProcessingConfiguration(IImageProcessingConfiguration v); external String get environmentTexture; external set environmentTexture(String v); external IColorGradingConfiguration get colorGrading; external set colorGrading(IColorGradingConfiguration v); external num get environmentRotationY; external set environmentRotationY(num v); external dynamic/*bool|IGlowLayerOptions*/ get glow; external set glow(dynamic/*bool|IGlowLayerOptions*/ v); external bool get disableHdr; external set disableHdr(bool v); external bool get renderInBackground; external set renderInBackground(bool v); external bool get disableCameraControl; external set disableCameraControl(bool v); external dynamic/*JSMap of <String,dynamic>*/ get animationPropertiesOverride; external set animationPropertiesOverride(dynamic/*JSMap of <String,dynamic>*/ v); external dynamic/*{
                    materialType: "standard" | "pbr";
                    [propName: string]: any;
            }*/ get defaultMaterial; external set defaultMaterial(dynamic/*{
                    materialType: "standard" | "pbr";
                    [propName: string]: any;
            }*/ v); external dynamic/*{
                    shadowsEnabled?: boolean;
                    particlesEnabled?: boolean;
                    collisionsEnabled?: boolean;
                    lightsEnabled?: boolean;
                    texturesEnabled?: boolean;
                    lensFlaresEnabled?: boolean;
                    proceduralTexturesEnabled?: boolean;
                    renderTargetsEnabled?: boolean;
                    spritesEnabled?: boolean;
                    skeletonsEnabled?: boolean;
                    audioEnabled?: boolean;
            }*/ get flags; external set flags(dynamic/*{
                    shadowsEnabled?: boolean;
                    particlesEnabled?: boolean;
                    collisionsEnabled?: boolean;
                    lightsEnabled?: boolean;
                    texturesEnabled?: boolean;
                    lensFlaresEnabled?: boolean;
                    proceduralTexturesEnabled?: boolean;
                    renderTargetsEnabled?: boolean;
                    spritesEnabled?: boolean;
                    skeletonsEnabled?: boolean;
                    audioEnabled?: boolean;
            }*/ v); external factory ISceneConfiguration({ bool debug, dynamic/*{
                    r: number;
                    g: number;
                    b: number;
                    a: number;
            }*/ clearColor, dynamic/*{
                    r: number;
                    g: number;
                    b: number;
            }*/ mainColor, IImageProcessingConfiguration imageProcessingConfiguration, String environmentTexture, IColorGradingConfiguration colorGrading, num environmentRotationY, dynamic/*bool|IGlowLayerOptions*/ glow, bool disableHdr, bool renderInBackground, bool disableCameraControl, dynamic/*JSMap of <String,dynamic>*/ animationPropertiesOverride, dynamic/*{
                    materialType: "standard" | "pbr";
                    [propName: string]: any;
            }*/ defaultMaterial, dynamic/*{
                    shadowsEnabled?: boolean;
                    particlesEnabled?: boolean;
                    collisionsEnabled?: boolean;
                    lightsEnabled?: boolean;
                    texturesEnabled?: boolean;
                    lensFlaresEnabled?: boolean;
                    proceduralTexturesEnabled?: boolean;
                    renderTargetsEnabled?: boolean;
                    spritesEnabled?: boolean;
                    skeletonsEnabled?: boolean;
                    audioEnabled?: boolean;
            }*/ flags}); }

 /// The Color Grading Configuration groups the different settings used to define the color grading used in the viewer.
 @anonymous @JS() abstract class IColorGradingConfiguration {
 /// Transform data string, encoded as determined by transformDataFormat.
 external String get transformData; external set transformData(String v);
 /// The encoding format of TransformData (currently only raw-base16 is supported).
 external String get transformDataFormat; external set transformDataFormat(String v);
 /// The weight of the transform
 external num get transformWeight; external set transformWeight(num v);
 /// Color curve colorFilterHueGlobal value
 external num get colorFilterHueGlobal; external set colorFilterHueGlobal(num v);
 /// Color curve colorFilterHueShadows value
 external num get colorFilterHueShadows; external set colorFilterHueShadows(num v);
 /// Color curve colorFilterHueMidtones value
 external num get colorFilterHueMidtones; external set colorFilterHueMidtones(num v);
 /// Color curve colorFilterHueHighlights value
 external num get colorFilterHueHighlights; external set colorFilterHueHighlights(num v);
 /// Color curve colorFilterDensityGlobal value
 external num get colorFilterDensityGlobal; external set colorFilterDensityGlobal(num v);
 /// Color curve colorFilterDensityShadows value
 external num get colorFilterDensityShadows; external set colorFilterDensityShadows(num v);
 /// Color curve colorFilterDensityMidtones value
 external num get colorFilterDensityMidtones; external set colorFilterDensityMidtones(num v);
 /// Color curve colorFilterDensityHighlights value
 external num get colorFilterDensityHighlights; external set colorFilterDensityHighlights(num v);
 /// Color curve saturationGlobal value
 external num get saturationGlobal; external set saturationGlobal(num v);
 /// Color curve saturationShadows value
 external num get saturationShadows; external set saturationShadows(num v);
 /// Color curve saturationMidtones value
 external num get saturationMidtones; external set saturationMidtones(num v);
 /// Color curve saturationHighlights value
 external num get saturationHighlights; external set saturationHighlights(num v);
 /// Color curve exposureGlobal value
 external num get exposureGlobal; external set exposureGlobal(num v);
 /// Color curve exposureShadows value
 external num get exposureShadows; external set exposureShadows(num v);
 /// Color curve exposureMidtones value
 external num get exposureMidtones; external set exposureMidtones(num v);
 /// Color curve exposureHighlights value
 external num get exposureHighlights; external set exposureHighlights(num v); external factory IColorGradingConfiguration({ String transformData, String transformDataFormat, num transformWeight, num colorFilterHueGlobal, num colorFilterHueShadows, num colorFilterHueMidtones, num colorFilterHueHighlights, num colorFilterDensityGlobal, num colorFilterDensityShadows, num colorFilterDensityMidtones, num colorFilterDensityHighlights, num saturationGlobal, num saturationShadows, num saturationMidtones, num saturationHighlights, num exposureGlobal, num exposureShadows, num exposureMidtones, num exposureHighlights}); }

 @anonymous @JS() abstract class ISceneOptimizerConfiguration { external num get targetFrameRate; external set targetFrameRate(num v); external num get trackerDuration; external set trackerDuration(num v); external bool get autoGeneratePriorities; external set autoGeneratePriorities(bool v); external bool get improvementMode; external set improvementMode(bool v); external String get degradation; external set degradation(String v); external dynamic/*{
                    texture?: ISceneOptimizerParameters;
                    hardwareScaling?: ISceneOptimizerParameters;
                    shadow?: ISceneOptimizerParameters;
                    postProcess?: ISceneOptimizerParameters;
                    lensFlare?: ISceneOptimizerParameters;
                    particles?: ISceneOptimizerParameters;
                    renderTarget?: ISceneOptimizerParameters;
                    mergeMeshes?: ISceneOptimizerParameters;
            }*/ get types; external set types(dynamic/*{
                    texture?: ISceneOptimizerParameters;
                    hardwareScaling?: ISceneOptimizerParameters;
                    shadow?: ISceneOptimizerParameters;
                    postProcess?: ISceneOptimizerParameters;
                    lensFlare?: ISceneOptimizerParameters;
                    particles?: ISceneOptimizerParameters;
                    renderTarget?: ISceneOptimizerParameters;
                    mergeMeshes?: ISceneOptimizerParameters;
            }*/ v); external String get custom; external set custom(String v); external factory ISceneOptimizerConfiguration({ num targetFrameRate, num trackerDuration, bool autoGeneratePriorities, bool improvementMode, String degradation, dynamic/*{
                    texture?: ISceneOptimizerParameters;
                    hardwareScaling?: ISceneOptimizerParameters;
                    shadow?: ISceneOptimizerParameters;
                    postProcess?: ISceneOptimizerParameters;
                    lensFlare?: ISceneOptimizerParameters;
                    particles?: ISceneOptimizerParameters;
                    renderTarget?: ISceneOptimizerParameters;
                    mergeMeshes?: ISceneOptimizerParameters;
            }*/ types, String custom}); }

 @anonymous @JS() abstract class IObserversConfiguration { external String get onEngineInit; external set onEngineInit(String v); external String get onSceneInit; external set onSceneInit(String v); external String get onModelLoaded; external set onModelLoaded(String v); external factory IObserversConfiguration({ String onEngineInit, String onSceneInit, String onModelLoaded}); }

 @anonymous @JS() abstract class ICameraConfiguration { external dynamic/*{
                    x: number;
                    y: number;
                    z: number;
            }*/ get position; external set position(dynamic/*{
                    x: number;
                    y: number;
                    z: number;
            }*/ v); external dynamic/*{
                    x: number;
                    y: number;
                    z: number;
                    w: number;
            }*/ get rotation; external set rotation(dynamic/*{
                    x: number;
                    y: number;
                    z: number;
                    w: number;
            }*/ v); external num get fov; external set fov(num v); external num get fovMode; external set fovMode(num v); external num get minZ; external set minZ(num v); external num get maxZ; external set maxZ(num v); external num get inertia; external set inertia(num v); external num get exposure; external set exposure(num v); external num get pinchPrecision; external set pinchPrecision(num v); external dynamic/*JSMap of <String,num|{
                            type: number;
                            [propName: string]: any;
                    }>*/ get behaviors; external set behaviors(dynamic/*JSMap of <String,num|{
                            type: number;
                            [propName: string]: any;
                    }>*/ v); external bool get disableCameraControl; external set disableCameraControl(bool v); external bool get disableCtrlForPanning; external set disableCtrlForPanning(bool v); external bool get disableAutoFocus; external set disableAutoFocus(bool v); /* Index signature is not yet supported by JavaScript interop. */
 }

 @anonymous @JS() abstract class ILightConfiguration { external num get type; external set type(num v); external String get name; external set name(String v); external bool get disabled; external set disabled(bool v); external dynamic/*{
                    x: number;
                    y: number;
                    z: number;
            }*/ get position; external set position(dynamic/*{
                    x: number;
                    y: number;
                    z: number;
            }*/ v); external dynamic/*{
                    x: number;
                    y: number;
                    z: number;
            }*/ get target; external set target(dynamic/*{
                    x: number;
                    y: number;
                    z: number;
            }*/ v); external dynamic/*{
                    x: number;
                    y: number;
                    z: number;
            }*/ get direction; external set direction(dynamic/*{
                    x: number;
                    y: number;
                    z: number;
            }*/ v); external dynamic/*{
                    r: number;
                    g: number;
                    b: number;
            }*/ get diffuse; external set diffuse(dynamic/*{
                    r: number;
                    g: number;
                    b: number;
            }*/ v); external dynamic/*{
                    r: number;
                    g: number;
                    b: number;
            }*/ get specular; external set specular(dynamic/*{
                    r: number;
                    g: number;
                    b: number;
            }*/ v); external num get intensity; external set intensity(num v); external num get intensityMode; external set intensityMode(num v); external num get radius; external set radius(num v); external bool get shadownEnabled; external set shadownEnabled(bool v); external dynamic/*{
                    useBlurExponentialShadowMap?: boolean;
                    useBlurCloseExponentialShadowMap?: boolean;
                    useKernelBlur?: boolean;
                    blurKernel?: number;
                    blurScale?: number;
                    minZ?: number;
                    maxZ?: number;
                    frustumSize?: number;
                    angleScale?: number;
                    frustumEdgeFalloff?: number;
                    [propName: string]: any;
            }*/ get shadowConfig; external set shadowConfig(dynamic/*{
                    useBlurExponentialShadowMap?: boolean;
                    useBlurCloseExponentialShadowMap?: boolean;
                    useKernelBlur?: boolean;
                    blurKernel?: number;
                    blurScale?: number;
                    minZ?: number;
                    maxZ?: number;
                    frustumSize?: number;
                    angleScale?: number;
                    frustumEdgeFalloff?: number;
                    [propName: string]: any;
            }*/ v); external num get spotAngle; external set spotAngle(num v); external num get shadowFieldOfView; external set shadowFieldOfView(num v); external num get shadowBufferSize; external set shadowBufferSize(num v); external num get shadowFrustumSize; external set shadowFrustumSize(num v); external num get shadowMinZ; external set shadowMinZ(num v); external num get shadowMaxZ; external set shadowMaxZ(num v); /* Index signature is not yet supported by JavaScript interop. */
 external dynamic/*JSMap of <String,num|{
                            type: number;
                            [propName: string]: any;
                    }>*/ get behaviors; external set behaviors(dynamic/*JSMap of <String,num|{
                            type: number;
                            [propName: string]: any;
                    }>*/ v); }

 @anonymous @JS() abstract class ISceneOptimizerParameters { external num get priority; external set priority(num v); external num get maximumSize; external set maximumSize(num v); external num get step; external set step(num v); external factory ISceneOptimizerParameters({ num priority, num maximumSize, num step}); }

 @anonymous @JS() abstract class IImageProcessingConfiguration { external bool get colorGradingEnabled; external set colorGradingEnabled(bool v); external bool get colorCurvesEnabled; external set colorCurvesEnabled(bool v); external dynamic/*{
                    globalHue?: number;
                    globalDensity?: number;
                    globalSaturation?: number;
                    globalExposure?: number;
                    highlightsHue?: number;
                    highlightsDensity?: number;
                    highlightsSaturation?: number;
                    highlightsExposure?: number;
                    midtonesHue?: number;
                    midtonesDensity?: number;
                    midtonesSaturation?: number;
                    midtonesExposure?: number;
                    shadowsHue?: number;
                    shadowsDensity?: number;
                    shadowsSaturation?: number;
                    shadowsExposure?: number;
            }*/ get colorCurves; external set colorCurves(dynamic/*{
                    globalHue?: number;
                    globalDensity?: number;
                    globalSaturation?: number;
                    globalExposure?: number;
                    highlightsHue?: number;
                    highlightsDensity?: number;
                    highlightsSaturation?: number;
                    highlightsExposure?: number;
                    midtonesHue?: number;
                    midtonesDensity?: number;
                    midtonesSaturation?: number;
                    midtonesExposure?: number;
                    shadowsHue?: number;
                    shadowsDensity?: number;
                    shadowsSaturation?: number;
                    shadowsExposure?: number;
            }*/ v); external bool get colorGradingWithGreenDepth; external set colorGradingWithGreenDepth(bool v); external bool get colorGradingBGR; external set colorGradingBGR(bool v); external num get exposure; external set exposure(num v); external bool get toneMappingEnabled; external set toneMappingEnabled(bool v); external num get contrast; external set contrast(num v); external bool get vignetteEnabled; external set vignetteEnabled(bool v); external num get vignetteStretch; external set vignetteStretch(num v); external num get vignetteCentreX; external set vignetteCentreX(num v); external num get vignetteCentreY; external set vignetteCentreY(num v); external num get vignetteWeight; external set vignetteWeight(num v); external dynamic/*{
                    r: number;
                    g: number;
                    b: number;
                    a?: number;
            }*/ get vignetteColor; external set vignetteColor(dynamic/*{
                    r: number;
                    g: number;
                    b: number;
                    a?: number;
            }*/ v); external num get vignetteCameraFov; external set vignetteCameraFov(num v); external num get vignetteBlendMode; external set vignetteBlendMode(num v); external bool get vignetteM; external set vignetteM(bool v); external bool get applyByPostProcess; external set applyByPostProcess(bool v); external bool get isEnabled; external set isEnabled(bool v); external factory IImageProcessingConfiguration({ bool colorGradingEnabled, bool colorCurvesEnabled, dynamic/*{
                    globalHue?: number;
                    globalDensity?: number;
                    globalSaturation?: number;
                    globalExposure?: number;
                    highlightsHue?: number;
                    highlightsDensity?: number;
                    highlightsSaturation?: number;
                    highlightsExposure?: number;
                    midtonesHue?: number;
                    midtonesDensity?: number;
                    midtonesSaturation?: number;
                    midtonesExposure?: number;
                    shadowsHue?: number;
                    shadowsDensity?: number;
                    shadowsSaturation?: number;
                    shadowsExposure?: number;
            }*/ colorCurves, bool colorGradingWithGreenDepth, bool colorGradingBGR, num exposure, bool toneMappingEnabled, num contrast, bool vignetteEnabled, num vignetteStretch, num vignetteCentreX, num vignetteCentreY, num vignetteWeight, dynamic/*{
                    r: number;
                    g: number;
                    b: number;
                    a?: number;
            }*/ vignetteColor, num vignetteCameraFov, num vignetteBlendMode, bool vignetteM, bool applyByPostProcess, bool isEnabled}); }

 
// End module babylonjs-viewer/configuration/configuration
 
// Module babylonjs-viewer/templateManager
 /// A single template configuration object
 @anonymous @JS() abstract class ITemplateConfiguration {
 /// can be either the id of the template's html element or a URL.
 /// See - http://doc.babylonjs.com/extensions/the_templating_system#location-vs-html
 external String get location; external set location(String v);
 /// If no location is provided you can provide here the raw html of this template.
 /// See http://doc.babylonjs.com/extensions/the_templating_system#location-vs-html
 external String get html; external set html(String v); external String get id; external set id(String v);
 /// Parameters that will be delivered to the template and will render it accordingly.
 external dynamic/*JSMap of <String,String|num|bool|object>*/ get params; external set params(dynamic/*JSMap of <String,String|num|bool|object>*/ v);
 /// Events to attach to this template.
 /// event name is the key. the value can either be a boolean (attach to the parent element)
 /// or a map of html id elements.
 /// See - http://doc.babylonjs.com/extensions/the_templating_system#event-binding
 external dynamic/*{
                    pointerdown?: boolean | {
                            [id: string]: boolean;
                    };
                    pointerup?: boolean | {
                            [id: string]: boolean;
                    };
                    pointermove?: boolean | {
                            [id: string]: boolean;
                    };
                    pointerover?: boolean | {
                            [id: string]: boolean;
                    };
                    pointerout?: boolean | {
                            [id: string]: boolean;
                    };
                    pointerenter?: boolean | {
                            [id: string]: boolean;
                    };
                    pointerleave?: boolean | {
                            [id: string]: boolean;
                    };
                    pointercancel?: boolean | {
                            [id: string]: boolean;
                    };
                    click?: boolean | {
                            [id: string]: boolean;
                    };
                    dragstart?: boolean | {
                            [id: string]: boolean;
                    };
                    drop?: boolean | {
                            [id: string]: boolean;
                    };
                    [key: string]: boolean | {
                            [id: string]: boolean;
                    } | undefined;
            }*/ get events; external set events(dynamic/*{
                    pointerdown?: boolean | {
                            [id: string]: boolean;
                    };
                    pointerup?: boolean | {
                            [id: string]: boolean;
                    };
                    pointermove?: boolean | {
                            [id: string]: boolean;
                    };
                    pointerover?: boolean | {
                            [id: string]: boolean;
                    };
                    pointerout?: boolean | {
                            [id: string]: boolean;
                    };
                    pointerenter?: boolean | {
                            [id: string]: boolean;
                    };
                    pointerleave?: boolean | {
                            [id: string]: boolean;
                    };
                    pointercancel?: boolean | {
                            [id: string]: boolean;
                    };
                    click?: boolean | {
                            [id: string]: boolean;
                    };
                    dragstart?: boolean | {
                            [id: string]: boolean;
                    };
                    drop?: boolean | {
                            [id: string]: boolean;
                    };
                    [key: string]: boolean | {
                            [id: string]: boolean;
                    } | undefined;
            }*/ v); external factory ITemplateConfiguration({ String location, String html, String id, dynamic/*JSMap of <String,String|num|bool|object>*/ params, dynamic/*{
                    pointerdown?: boolean | {
                            [id: string]: boolean;
                    };
                    pointerup?: boolean | {
                            [id: string]: boolean;
                    };
                    pointermove?: boolean | {
                            [id: string]: boolean;
                    };
                    pointerover?: boolean | {
                            [id: string]: boolean;
                    };
                    pointerout?: boolean | {
                            [id: string]: boolean;
                    };
                    pointerenter?: boolean | {
                            [id: string]: boolean;
                    };
                    pointerleave?: boolean | {
                            [id: string]: boolean;
                    };
                    pointercancel?: boolean | {
                            [id: string]: boolean;
                    };
                    click?: boolean | {
                            [id: string]: boolean;
                    };
                    dragstart?: boolean | {
                            [id: string]: boolean;
                    };
                    drop?: boolean | {
                            [id: string]: boolean;
                    };
                    [key: string]: boolean | {
                            [id: string]: boolean;
                    } | undefined;
            }*/ events}); }

 /// The object sent when an event is triggered
 @anonymous @JS() abstract class EventCallback { external Event get event; external set event(Event v); external Template get template; external set template(Template v); external String get selector; external set selector(String v); external dynamic get payload; external set payload(dynamic v); external factory EventCallback({ Event event, Template template, String selector, dynamic payload}); }

 /// The template manager, a member of the viewer class, will manage the viewer's templates and generate the HTML.
 /// The template manager managers a single viewer and can be seen as the collection of all sub-templates of the viewer.
 @JS("babylonjs-viewer/templateManager.TemplateManager" ) class TemplateManager { // @Ignore
 TemplateManager .fakeConstructor$() ;
 external HtmlElement get containerElement; external set containerElement(HtmlElement v);
 /// Will be triggered when any template is initialized
 external Observable<Template> get onTemplateInit; external set onTemplateInit(Observable<Template> v);
 /// Will be triggered when any template is fully loaded
 external Observable<Template> get onTemplateLoaded; external set onTemplateLoaded(Observable<Template> v);
 /// Will be triggered when a template state changes
 external Observable<Template> get onTemplateStateChange; external set onTemplateStateChange(Observable<Template> v);
 /// Will be triggered when all templates finished loading
 external Observable<TemplateManager> get onAllLoaded; external set onAllLoaded(Observable<TemplateManager> v);
 /// Will be triggered when any event on any template is triggered.
 external Observable<EventCallback> get onEventTriggered; external set onEventTriggered(Observable<EventCallback> v);
 /// This template manager's event manager. In charge of callback registrations to native event types
 external EventManager get eventManager; external set eventManager(EventManager v); external factory TemplateManager(HtmlElement containerElement);
 /// Initialize the template(s) for the viewer. Called bay the Viewer class
 external Promise<Null> initTemplate(dynamic/*JSMap of <String,ITemplateConfiguration>*/ templates);
 /// Get the canvas in the template tree.
 /// There must be one and only one canvas inthe template.
 external CanvasElement/*CanvasElement|Null*/ getCanvas();
 /// Get a specific template from the template tree
 external dynamic/*Template|dynamic*/ getTemplate(String name);
 /// Dispose the template manager
 external void dispose(); }

 /// This class represents a single template in the viewer's template tree.
 /// An example for a template is a single canvas, an overlay (containing sub-templates) or the navigation bar.
 /// A template is injected using the template manager in the correct position.
 /// The template is rendered using Handlebars and can use Handlebars' features (such as parameter injection)
 /// For further information please refer to the documentation page, https://doc.babylonjs.com
 @JS("babylonjs-viewer/templateManager.Template" ) class Template { // @Ignore
 Template .fakeConstructor$() ;
 external String get name; external set name(String v);
 /// Will be triggered when the template is loaded
 external Observable<Template> get onLoaded; external set onLoaded(Observable<Template> v);
 /// will be triggered when the template is appended to the tree
 external Observable<Template> get onAppended; external set onAppended(Observable<Template> v);
 /// Will be triggered when the template's state changed (shown, hidden)
 external Observable<Template> get onStateChange; external set onStateChange(Observable<Template> v);
 /// Will be triggered when an event is triggered on ths template.
 /// The event is a native browser event (like mouse or pointer events)
 external Observable<EventCallback> get onEventTriggered; external set onEventTriggered(Observable<EventCallback> v);
 /// is the template loaded?
 external bool get isLoaded; external set isLoaded(bool v);
 /// This is meant to be used to track the show and hide functions.
 /// This is NOT (!!) a flag to check if the element is actually visible to the user.
 external bool get isShown; external set isShown(bool v);
 /// Is this template a part of the HTML tree (the template manager injected it)
 external bool get isInHtmlTree; external set isInHtmlTree(bool v);
 /// The HTML element containing this template
 external HtmlElement get parent; external set parent(HtmlElement v);
 /// A promise that is fulfilled when the template finished loading.
 external Promise<Template> get initPromise; external set initPromise(Promise<Template> v); external factory Template(String name, ITemplateConfiguration JS$_configuration);
 /// Some templates have parameters (like background color for example).
 /// The parameters are provided to Handlebars which in turn generates the template.
 /// This function will update the template with the new parameters
 /// Note that when updating parameters the events will be registered again (after being cleared).
 external void updateParams(dynamic/*JSMap of <String,String|num|bool|object>*/ params, [bool append]);
 /// Get the template'S configuration
 external ITemplateConfiguration get configuration; external set configuration(ITemplateConfiguration v);
 /// A template can be a parent element for other templates or HTML elements.
 /// This function will deliver all child HTML elements of this template.
 external List<String> getChildElements();
 /// Appending the template to a parent HTML element.
 /// If a parent is already set and you wish to replace the old HTML with new one, forceRemove should be true.
 external void appendTo(HtmlElement parent, [bool forceRemove]);
 /// Show the template using the provided visibilityFunction, or natively using display: flex.
 /// The provided function returns a promise that should be fullfilled when the element is shown.
 /// Since it is a promise async operations are more than possible.
 /// See the default viewer for an opacity example.
 external Promise<Template> show([Promise<Template> visibilityFunction(Template template)]);
 /// Hide the template using the provided visibilityFunction, or natively using display: none.
 /// The provided function returns a promise that should be fullfilled when the element is hidden.
 /// Since it is a promise async operations are more than possible.
 /// See the default viewer for an opacity example.
 external Promise<Template> hide([Promise<Template> visibilityFunction(Template template)]);
 /// Dispose this template
 external void dispose(); }

 
// End module babylonjs-viewer/templateManager
 
// Module babylonjs-viewer/viewer/sceneManager
 /// This interface describes the structure of the variable sent with the configuration observables of the scene manager.
 /// O - the type of object we are dealing with (Light, ArcRotateCamera, Scene, etc')
 /// T - the configuration type
 @anonymous @JS() abstract class IPostConfigurationCallback <OBJ, CONF > { external CONF get newConfiguration; external set newConfiguration(CONF v); external SceneManager get sceneManager; external set sceneManager(SceneManager v); external OBJ get object; external set object(OBJ v); external ViewerModel get model; external set model(ViewerModel v); external factory IPostConfigurationCallback({ CONF newConfiguration, SceneManager sceneManager, OBJ object, ViewerModel model}); }

 @JS("babylonjs-viewer/viewer/sceneManager.SceneManager" ) class SceneManager { // @Ignore
 SceneManager .fakeConstructor$() ;
 /// Will notify when the scene was initialized
 external Observable<Scene> get onSceneInitObservable; external set onSceneInitObservable(Observable<Scene> v);
 /// Will notify after the scene was configured. Can be used to further configure the scene
 external Observable<IPostConfigurationCallback<Scene,ISceneConfiguration>> get onSceneConfiguredObservable; external set onSceneConfiguredObservable(Observable<IPostConfigurationCallback<Scene,ISceneConfiguration>> v);
 /// Will notify after the scene optimized was configured. Can be used to further configure the scene optimizer
 external Observable<IPostConfigurationCallback<SceneOptimizer,dynamic/*ISceneOptimizerConfiguration|bool*/>> get onSceneOptimizerConfiguredObservable; external set onSceneOptimizerConfiguredObservable(Observable<IPostConfigurationCallback<SceneOptimizer,dynamic/*ISceneOptimizerConfiguration|bool*/>> v);
 /// Will notify after the camera was configured. Can be used to further configure the camera
 external Observable<IPostConfigurationCallback<ArcRotateCamera,ICameraConfiguration>> get onCameraConfiguredObservable; external set onCameraConfiguredObservable(Observable<IPostConfigurationCallback<ArcRotateCamera,ICameraConfiguration>> v);
 /// Will notify after the lights were configured. Can be used to further configure lights
 external Observable<IPostConfigurationCallback<List<Light>,dynamic/*JSMap of <String,ILightConfiguration|bool>*/>> get onLightsConfiguredObservable; external set onLightsConfiguredObservable(Observable<IPostConfigurationCallback<List<Light>,dynamic/*JSMap of <String,ILightConfiguration|bool>*/>> v);
 /// Will notify after the model(s) were configured. Can be used to further configure models
 external Observable<IPostConfigurationCallback<List<ViewerModel>,IModelConfiguration>> get onModelsConfiguredObservable; external set onModelsConfiguredObservable(Observable<IPostConfigurationCallback<List<ViewerModel>,IModelConfiguration>> v);
 /// Will notify after the envirnoment was configured. Can be used to further configure the environment
 external Observable<IPostConfigurationCallback<EnvironmentHelper,dynamic/*{
                    skybox?: ISkyboxConfiguration | boolean;
                    ground?: IGroundConfiguration | boolean;
            }*/>> get onEnvironmentConfiguredObservable; external set onEnvironmentConfiguredObservable(Observable<IPostConfigurationCallback<EnvironmentHelper,dynamic/*{
                    skybox?: ISkyboxConfiguration | boolean;
                    ground?: IGroundConfiguration | boolean;
            }*/>> v);
 /// The Babylon Scene of this viewer
 external Scene get scene; external set scene(Scene v);
 /// The camera used in this viewer
 external ArcRotateCamera get camera; external set camera(ArcRotateCamera v);
 /// Babylon's scene optimizer
 external SceneOptimizer get sceneOptimizer; external set sceneOptimizer(SceneOptimizer v);
 /// Models displayed in this viewer.
 external List<ViewerModel> get models; external set models(List<ViewerModel> v);
 /// Babylon's environment helper of this viewer
 external EnvironmentHelper get environmentHelper; external set environmentHelper(EnvironmentHelper v); external num get JS$_defaultHighpTextureType; external set JS$_defaultHighpTextureType(num v); external num get JS$_shadowGeneratorBias; external set JS$_shadowGeneratorBias(num v); external num get JS$_defaultPipelineTextureType; external set JS$_defaultPipelineTextureType(num v);
 /// The maximum number of shadows supported by the curent viewer
 external num get JS$_maxShadows; external set JS$_maxShadows(num v);
 /// The labs variable consists of objects that will have their API change.
 /// Please be careful when using labs in production.
 external ViewerLabs get labs; external set labs(ViewerLabs v); external DefaultRenderingPipeline/*DefaultRenderingPipeline|Null*/ get defaultRenderingPipeline; external set defaultRenderingPipeline(DefaultRenderingPipeline/*DefaultRenderingPipeline|Null*/ v); external factory SceneManager(AbstractViewer JS$_viewer);
 /// Returns a boolean representing HDR support
 external bool get isHdrSupported; external set isHdrSupported(bool v);
 /// Return the main color defined in the configuration.
 external Color3 get mainColor; external set mainColor(Color3 v); external Color3 get reflectionColor; external set reflectionColor(Color3 v); external bool get animationBlendingEnabled; external set animationBlendingEnabled(bool v);
 /// Should shadows be rendered every frame, or only once and stop.
 /// This can be used to optimize a scene.
 /// Not that the shadows will NOT disapear but will remain in place.
 external bool get processShadows; external set processShadows(bool v); external bool get groundEnabled; external set groundEnabled(bool v);
 /// sets wether the reflection is disabled.
 external bool get groundMirrorEnabled; external set groundMirrorEnabled(bool v); external bool get defaultRenderingPipelineEnabled; external set defaultRenderingPipelineEnabled(bool v);
 /// Sets the engine flags to unlock all babylon features.
 /// Can also be configured using the scene.flags configuration object
 external void unlockBabylonFeatures();
 /// initialize the scene. Calling this function again will dispose the old scene, if exists.
 external Promise<Scene> initScene([ISceneConfiguration sceneConfiguration, dynamic/*bool|ISceneOptimizerConfiguration*/ optimizerConfiguration]); external void clearScene([bool clearModels, bool clearLights]);
 /// This will update the scene's configuration, including camera, lights, environment.
 external void updateConfiguration(Partial<ViewerConfiguration> newConfiguration, ViewerConfiguration globalConfiguration); external bool get bloomEnabled; external set bloomEnabled(bool v); external bool get fxaaEnabled; external set fxaaEnabled(bool v);
 /// internally configure the scene using the provided configuration.
 /// The scene will not be recreated, but just updated.
 external void JS$_configureScene(ISceneConfiguration sceneConfig);
 /// Configure the scene optimizer.
 /// The existing scene optimizer will be disposed and a new one will be created.
 external void JS$_configureOptimizer(dynamic/*ISceneOptimizerConfiguration|bool*/ optimizerConfig);
 /// (Re) configure the camera. The camera will only be created once and from this point will only be reconfigured.
 external void JS$_configureCamera([ICameraConfiguration cameraConfig]); external dynamic/*Promise<Scene>|dynamic*/ JS$_configureEnvironment([dynamic/*ISkyboxConfiguration|bool*/ skyboxConifguration, dynamic/*IGroundConfiguration|bool*/ groundConfiguration]);
 /// configure the lights.
 external void JS$_configureLights([dynamic/*JSMap of <String,ILightConfiguration|bool>*/ lightsConfiguration]);
 /// Gets the shadow map blur kernel according to the light configuration.
 external num getBlurKernel(IShadowLight light, num bufferSize);
 /// Alters render settings to reduce features based on hardware feature limitations
 external void JS$_handleHardwareLimitations([bool enableHDR]);
 /// Dispoe the entire viewer including the scene and the engine
 external void dispose(); }

 
// End module babylonjs-viewer/viewer/sceneManager
 
// Module babylonjs-viewer/configuration/loader
 /// The configuration loader will load the configuration object from any source and will use the defined mapper to
 /// parse the object and return a conform ViewerConfiguration.
 /// It is a private member of the scene.
 @JS("babylonjs-viewer/configuration/loader.ConfigurationLoader" ) class ConfigurationLoader { // @Ignore
 ConfigurationLoader .fakeConstructor$() ;
 external factory ConfigurationLoader([bool JS$_enableCache]);
 /// load a configuration object that is defined in the initial configuration provided.
 /// The viewer configuration can extend different types of configuration objects and have an extra configuration defined.
 external Promise<ViewerConfiguration> loadConfiguration([ViewerConfiguration initConfig, void callback(ViewerConfiguration config)]);
 /// Dispose the configuration loader. This will cancel file requests, if active.
 external void dispose(); }

 
// End module babylonjs-viewer/configuration/loader
 
// Module babylonjs-viewer/
 /// BabylonJS Viewer
 /// An HTML-Based viewer for 3D models, based on BabylonJS and its extensions.
 @JS("babylonjs-viewer/.disableInit" ) external bool get disableInit; @JS("babylonjs-viewer/.disableInit" ) external set disableInit(bool v);
 /// Dispose all viewers currently registered
 @JS("babylonjs-viewer/.disposeAll" ) external void disposeAll(); @JS("babylonjs-viewer/.Version" ) external String get Version; export show BABYLON, Version, InitTags, DefaultViewer, AbstractViewer, viewerGlobals, telemetryManager, disableInit, viewerManager, mapperManager, disposeAll, ModelLoader, ViewerModel, num/*enum AnimationPlayMode*/, num/*enum AnimationState*/, num/*enum ModelState*/, ILoaderPlugin ;
 export "configuration.dart" ;
 
// End module babylonjs-viewer/
 
// Module babylonjs-viewer/eventManager
 /// The EventManager is in charge of registering user interctions with the viewer.
 /// It is used in the TemplateManager
 @JS("babylonjs-viewer/eventManager.EventManager" ) class EventManager { // @Ignore
 EventManager .fakeConstructor$() ;
 external factory EventManager(TemplateManager JS$_templateManager);
 /// Register a new callback to a specific template.
 /// The best example for the usage can be found in the DefaultViewer
 external void registerCallback(String templateName, void callback(EventCallback eventData), [String eventType, String selector]);
 /// This will remove a registered event from the defined template.
 /// Each one of the variables apart from the template name are optional, but one must be provided.
 external void unregisterCallback(String templateName, void callback(EventCallback eventData), [String eventType, String selector]);
 /// Dispose the event manager
 external void dispose(); }

 
// End module babylonjs-viewer/eventManager
 
// Module babylonjs-viewer/labs/viewerLabs
 /// The ViewerLabs class will hold functions that are not (!) backwards compatible.
 /// The APIs in all labs-related classes and configuration  might change.
 /// Once stable, lab features will be moved to the publis API and configuration object.
 @JS("babylonjs-viewer/labs/viewerLabs.ViewerLabs" ) class ViewerLabs { // @Ignore
 ViewerLabs .fakeConstructor$() ;
 external factory ViewerLabs(SceneManager JS$_sceneManager); external String get assetsRootURL; external set assetsRootURL(String v); external PBREnvironment get environment; external set environment(PBREnvironment v);
 /// Loads an environment map from a given URL
 /*external void loadEnvironment(String url,
    [void onSuccess(PBREnvironment env),
    void onProgress(num bytesLoaded, num bytesTotal),
    void onError(dynamic e)]);*/
 /// Loads an environment map from a given URL
 /*external void loadEnvironment(ByteBuffer buffer,
    [void onSuccess(PBREnvironment env),
    void onProgress(num bytesLoaded, num bytesTotal),
    void onError(dynamic e)]);*/
 /// Sets the environment to an already loaded environment
 /*external void loadEnvironment(PBREnvironment env,
    [void onSuccess(PBREnvironment env),
    void onProgress(num bytesLoaded, num bytesTotal),
    void onError(dynamic e)]);*/
 external void loadEnvironment(dynamic/*String|ByteBuffer|PBREnvironment*/ url_buffer_env, [void onSuccess(PBREnvironment env), void onProgress(num bytesLoaded, num bytesTotal), void onError(dynamic e)]);
 /// Applies an `EnvironmentMapConfiguration` to the scene
 external void applyEnvironmentMapConfiguration([num rotationY]);
 /// Get an environment asset url by using the configuration if the path is not absolute.
 external String getAssetUrl(String url); }

 
// End module babylonjs-viewer/labs/viewerLabs
 
// Module babylonjs-viewer/labs/environmentSerializer
 /// Spherical polynomial coefficients (counter part to spherical harmonic coefficients used in shader irradiance calculation)
 /// @ignoreChildren
 @anonymous @JS() abstract class SphericalPolynomalCoefficients { external Vector3 get x; external set x(Vector3 v); external Vector3 get y; external set y(Vector3 v); external Vector3 get z; external set z(Vector3 v); external Vector3 get xx; external set xx(Vector3 v); external Vector3 get yy; external set yy(Vector3 v); external Vector3 get zz; external set zz(Vector3 v); external Vector3 get yz; external set yz(Vector3 v); external Vector3 get zx; external set zx(Vector3 v); external Vector3 get xy; external set xy(Vector3 v); external factory SphericalPolynomalCoefficients({ Vector3 x, Vector3 y, Vector3 z, Vector3 xx, Vector3 yy, Vector3 zz, Vector3 yz, Vector3 zx, Vector3 xy}); }

 /// Wraps data and maps required for environments with physically based rendering
 @anonymous @JS() abstract class PBREnvironment {
 /// Spherical Polynomial Coefficients representing an irradiance map
 external SphericalPolynomalCoefficients get irradiancePolynomialCoefficients; external set irradiancePolynomialCoefficients(SphericalPolynomalCoefficients v);
 /// Specular cubemap
 external TextureCube get specularTexture; external set specularTexture(TextureCube v);
 /// A scale factor applied to RGB values after reading from environment maps
 external num get textureIntensityScale; external set textureIntensityScale(num v); external factory PBREnvironment({ SphericalPolynomalCoefficients irradiancePolynomialCoefficients, TextureCube specularTexture, num textureIntensityScale}); }

 /// Environment map representations: layouts, projections and approximations
 /*export type MapType = 'irradiance_sh_coefficients_9' | 'cubemap_faces';*/ 
 /// Image type used for environment map
 /*export type ImageType = 'png';*/ 
 /// A generic field in JSON that report's its type
 @anonymous @JS() abstract class TypedObject <T > { external T get type; external set type(T v); external factory TypedObject({ T type}); }

 /// Describes a range of bytes starting at byte pos (inclusive) and finishing at byte pos + length - 1
 @anonymous @JS() abstract class ByteRange { external num get pos; external set pos(num v); external num get length; external set length(num v); external factory ByteRange({ num pos, num length}); }

 /// Complete Spectre Environment JSON Descriptor
 @anonymous @JS() abstract class EnvJsonDescriptor { external TypedObject<String/*'irradiance_sh_coefficients_9'|'cubemap_faces'*/> get radiance; external set radiance(TypedObject<String/*'irradiance_sh_coefficients_9'|'cubemap_faces'*/> v); external TypedObject<String/*'irradiance_sh_coefficients_9'|'cubemap_faces'*/> get irradiance; external set irradiance(TypedObject<String/*'irradiance_sh_coefficients_9'|'cubemap_faces'*/> v); external TypedObject<String/*'irradiance_sh_coefficients_9'|'cubemap_faces'*/> get specular; external set specular(TypedObject<String/*'irradiance_sh_coefficients_9'|'cubemap_faces'*/> v); external factory EnvJsonDescriptor({ TypedObject<String/*'irradiance_sh_coefficients_9'|'cubemap_faces'*/> radiance, TypedObject<String/*'irradiance_sh_coefficients_9'|'cubemap_faces'*/> irradiance, TypedObject<String/*'irradiance_sh_coefficients_9'|'cubemap_faces'*/> specular}); }

 /// Spherical harmonic coefficients to provide an irradiance map
 @anonymous @JS() abstract class IrradianceSHCoefficients9 implements TypedObject<String/*'irradiance_sh_coefficients_9'|'cubemap_faces'*/> { external List<num> get l00; external set l00(List<num> v); external List<num> get l1_1; external set l1_1(List<num> v); external List<num> get l10; external set l10(List<num> v); external List<num> get l11; external set l11(List<num> v); external List<num> get l2_2; external set l2_2(List<num> v); external List<num> get l2_1; external set l2_1(List<num> v); external List<num> get l20; external set l20(List<num> v); external List<num> get l21; external set l21(List<num> v); external List<num> get l22; external set l22(List<num> v); external factory IrradianceSHCoefficients9({ List<num> l00, List<num> l1_1, List<num> l10, List<num> l11, List<num> l2_2, List<num> l2_1, List<num> l20, List<num> l21, List<num> l22, T type}); }

 /// A generic set of images, where the image content is specified by byte ranges in the mipmaps field
 @anonymous @JS() abstract class ImageSet <T > implements TypedObject<String/*'irradiance_sh_coefficients_9'|'cubemap_faces'*/> { external String/*'png'*/ get imageType; external set imageType(String/*'png'*/ v); external num get width; external set width(num v); external num get height; external set height(num v); external List<T> get mipmaps; external set mipmaps(List<T> v); external num get multiplier; external set multiplier(num v); external factory ImageSet({ String/*'png'*/ imageType, num width, num height, List<T> mipmaps, num multiplier, T type}); }

 /// A set of cubemap faces
 /*export type CubemapFaces = ImageSet<Array<ByteRange>>;*/ 
 /// A single image containing an atlas of equirectangular-projection maps across all mip levels
 /*export type EquirectangularMipmapAtlas = ImageSet<ByteRange>;*/ 
 /// A static class proving methods to aid parsing Spectre environment files
 @JS("babylonjs-viewer/labs/environmentSerializer.EnvironmentDeserializer" ) class EnvironmentDeserializer { // @Ignore
 EnvironmentDeserializer .fakeConstructor$() ;
 /// Parses an arraybuffer into a new PBREnvironment object
 external static PBREnvironment Parse(ByteBuffer arrayBuffer); }

 
// End module babylonjs-viewer/labs/environmentSerializer
 
// Module babylonjs-viewer/labs/texture
 /// WebGL Pixel Formats
 @JS("babylonjs-viewer/labs/texture.PixelFormat" ) class PixelFormat { external static num get DEPTH_COMPONENT; external static num get ALPHA; external static num get RGB; external static num get RGBA; external static num get LUMINANCE; external static num get LUMINANCE_ALPHA; }
 /// WebGL Pixel Types
 @JS("babylonjs-viewer/labs/texture.PixelType" ) class PixelType { external static num get UNSIGNED_BYTE; external static num get UNSIGNED_SHORT_4_4_4_4; external static num get UNSIGNED_SHORT_5_5_5_1; external static num get UNSIGNED_SHORT_5_6_5; }
 /// WebGL Texture Magnification Filter
 @JS("babylonjs-viewer/labs/texture.TextureMagFilter" ) class TextureMagFilter { external static num get NEAREST; external static num get LINEAR; }
 /// WebGL Texture Minification Filter
 @JS("babylonjs-viewer/labs/texture.TextureMinFilter" ) class TextureMinFilter { external static num get NEAREST; external static num get LINEAR; external static num get NEAREST_MIPMAP_NEAREST; external static num get LINEAR_MIPMAP_NEAREST; external static num get NEAREST_MIPMAP_LINEAR; external static num get LINEAR_MIPMAP_LINEAR; }
 /// WebGL Texture Wrap Modes
 @JS("babylonjs-viewer/labs/texture.TextureWrapMode" ) class TextureWrapMode { external static num get REPEAT; external static num get CLAMP_TO_EDGE; external static num get MIRRORED_REPEAT; }
 /// Raw texture data and descriptor sufficient for WebGL texture upload
 @anonymous @JS() abstract class TextureData {
 /// Width of image
 external num get width; external set width(num v);
 /// Height of image
 external num get height; external set height(num v);
 /// Format of pixels in data
 external num/*enum PixelFormat*/ get format; external set format(num/*enum PixelFormat*/ v);
 /// Row byte alignment of pixels in data
 external num get alignment; external set alignment(num v);
 /// Pixel data
 external TypedData get data; external set data(TypedData v); external factory TextureData({ num width, num height, num/*enum PixelFormat*/ format, num alignment, TypedData data}); }

 /// Wraps sampling parameters for a WebGL texture
 @anonymous @JS() abstract class SamplingParameters {
 /// Magnification mode when upsampling from a WebGL texture
 external num/*enum TextureMagFilter*/ get magFilter; external set magFilter(num/*enum TextureMagFilter*/ v);
 /// Minification mode when upsampling from a WebGL texture
 external num/*enum TextureMinFilter*/ get minFilter; external set minFilter(num/*enum TextureMinFilter*/ v);
 /// X axis wrapping mode when sampling out of a WebGL texture bounds
 external num/*enum TextureWrapMode*/ get wrapS; external set wrapS(num/*enum TextureWrapMode*/ v);
 /// Y axis wrapping mode when sampling out of a WebGL texture bounds
 external num/*enum TextureWrapMode*/ get wrapT; external set wrapT(num/*enum TextureWrapMode*/ v);
 /// Anisotropic filtering samples
 external num get maxAnisotropy; external set maxAnisotropy(num v); external factory SamplingParameters({ num/*enum TextureMagFilter*/ magFilter, num/*enum TextureMinFilter*/ minFilter, num/*enum TextureWrapMode*/ wrapS, num/*enum TextureWrapMode*/ wrapT, num maxAnisotropy}); }

 /// Represents a valid WebGL texture source for use in texImage2D
 /*export type TextureSource = TextureData | ImageData | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement;*/ 
 /// A generic set of texture mipmaps (where index 0 has the largest dimension)
 /*export type Mipmaps<T> = Array<T>;*/ 
 /// A set of 6 cubemap arranged in the order [+x, -x, +y, -y, +z, -z]
 /*export type Faces<T> = Array<T>;*/ 
 /// A set of texture mipmaps specifically for 2D textures in WebGL (where index 0 has the largest dimension)
 /*export type Mipmaps2D = Mipmaps<TextureSource>;*/ 
 /// A set of texture mipmaps specifically for cubemap textures in WebGL (where index 0 has the largest dimension)
 /*export type MipmapsCube = Mipmaps<Faces<TextureSource>>;*/ 
 /// A minimal WebGL cubemap descriptor
 @JS("babylonjs-viewer/labs/texture.TextureCube" ) class TextureCube { // @Ignore
 TextureCube .fakeConstructor$() ;
 external num/*enum PixelFormat*/ get internalFormat; external set internalFormat(num/*enum PixelFormat*/ v); external num/*enum PixelType*/ get type; external set type(num/*enum PixelType*/ v); external List<List<dynamic/*TextureData|ImageData|ImageElement|CanvasElement|VideoElement*/>> get source; external set source(List<List<dynamic/*TextureData|ImageData|ImageElement|CanvasElement|VideoElement*/>> v);
 /// Returns the width of a face of the texture or 0 if not available
 external num get Width; external set Width(num v);
 /// Returns the height of a face of the texture or 0 if not available
 external num get Height; external set Height(num v);
 /// constructor
 external factory TextureCube(num/*enum PixelFormat*/ internalFormat, num/*enum PixelType*/ type, [List<List<dynamic/*TextureData|ImageData|ImageElement|CanvasElement|VideoElement*/>> source]); }

 /// A static class providing methods to aid working with Bablyon textures.
 @JS("babylonjs-viewer/labs/texture.TextureUtils" ) class TextureUtils { // @Ignore
 TextureUtils .fakeConstructor$() ;
 /// A prefix used when storing a babylon texture object reference on a Spectre texture object
 external static String get BabylonTextureKeyPrefix; external static set BabylonTextureKeyPrefix(String v);
 /// Controls anisotropic filtering for deserialized textures.
 external static num get MaxAnisotropy; external static set MaxAnisotropy(num v);
 /// Returns a BabylonCubeTexture instance from a Spectre texture cube, subject to sampling parameters.
 /// If such a texture has already been requested in the past, this texture will be returned, otherwise a new one will be created.
 /// The advantage of this is to enable working with texture objects without the need to initialize on the GPU until desired.
 external static CubeTexture GetBabylonCubeTexture(Scene scene, TextureCube textureCube, bool automaticMipmaps, [bool environment, bool singleLod]);
 /// Applies Spectre SamplingParameters to a Babylon texture by directly setting texture parameters on the internal WebGLTexture as well as setting Babylon fields
 external static void ApplySamplingParameters(BaseTexture babylonTexture, SamplingParameters parameters);
 /// Environment preprocessing dedicated value (Internal Use or Advanced only).
 external static num get EnvironmentLODScale; external static set EnvironmentLODScale(num v);
 /// Environment preprocessing dedicated value (Internal Use or Advanced only)..
 external static num get EnvironmentLODOffset; external static set EnvironmentLODOffset(num v); }

 
// End module babylonjs-viewer/labs/texture
